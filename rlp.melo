type U8 = {0..255}

def v2n<$n>(bvec: [U8; $n + 1]) =
    for byte in enumerate(bvec) fold accum = 0 :: Nat with accum + (byte[1] << (byte[0] * 8))

def rlp_decode<$n>(input: [U8; $n + 1]) =
    let byte = input[0] in
    # single byte with value < 128
    if byte < 128 then byte
    # string
    else if byte < 191 then rlp_decode_string<$s = $n>(input)
    # list
    else rlp_decode_list<$l = $n>(input)

def rlp_decode_list<$l>(input: [U8; $l + 1]) = 77
#     let byte = input[0]
#     # list with total payload of 0-55 bytes
#     if byte < 248 then
#         let num_items = byte - 192 in

#     # a list with a total payload of more than 55 bytes
#     else

def rlp_decode_string<$s>(input: [U8; $s + 1]) =
    unsafe let byte = input[0] in
    # string 0-55 bytes in length
    if byte < 184 then
        let len = byte - 128 in
        if len == 0 then []
        else input[0..len :! {0..$s}]
    # string > 55 bytes in length
    else let meta_len = byte - 183 in
        let len = v2n<$n = $s>(input[0..meta_len :! {0..$s}] :! [U8; $s + 1]) in
        input[meta_len :! {0..$s}..(meta_len + len) :! {0..$s}]